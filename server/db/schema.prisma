generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String               @id @default(cuid())
  organizationId           String               @map("organization_id")
  email                    String               @unique
  firstname                String
  lastname                 String
  username                 String
  department               Department?
  role                     UserRole             @default(EMPLOYEE)
  specialty                String?
  velocity                 Int?                 @default(10)
  status                   RecordStatus         @default(ACTIVE)
  meta                     Json                 @default("{}")
  createdAt                DateTime             @default(now()) @map("created_at")
  updatedAt                DateTime             @updatedAt @map("updated_at")
  subscriptionStatus       SubscriptionStatus   @default(ACTIVE) @map("subscription_status")
  subscriptionTier         SubscriptionTier     @default(FREE) @map("subscription_tier")
  googleAuthId             String?              @map("google_auth_id")
  comments                 Comment[]
  creditActions            CreditAction[]
  documentPermissions      DocumentPermission[]
  createdDocuments         Document[]
  IssueChangeHistory       IssueChangeHistory[]
  createdIssues            Issue[]              @relation("createdBy")
  ownedIssues              Issue[]              @relation("ownedBy")
  payments                 Payment[]
  createdProjects          Project[]            @relation("createdProjects")
  ownedProjects            Project[]            @relation("ownedProjects")
  specialties              Specialty[]
  jiraUserId               String?              @unique @map("jira_user_id")
  createdTemplateDocuments TemplateDocument[]
  createdTemplateIssues    TemplateIssue[]
  createdTemplateProjects  TemplateProject[]
  teams                    UserTeam[]
  organization             Organization         @relation(fields: [organizationId], references: [id])
  createdWorkPlans         WorkPlan[]           @relation("createdWorkPlans")
  ownedWorkPlans           WorkPlan[]           @relation("ownedWorkPlans")
  chatSessions             ChatSession[]

  @@index([organizationId, email, role, specialty, status, subscriptionTier])
  @@map("users")
}

model Organization {
  id                   String             @id @default(cuid())
  name                 String?
  description          String?
  website              String?
  status               RecordStatus       @default(ACTIVE)
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")
  meta                 Json               @default("{}")
  availableSeats       Int                @default(0) @map("available_seats")
  subscriptionEnd      DateTime?          @map("subscription_end")
  subscriptionStart    DateTime?          @map("subscription_start")
  subscriptionStatus   SubscriptionStatus @default(ACTIVE) @map("subscription_status")
  subscriptionTier     SubscriptionTier   @default(FREE) @map("subscription_tier")
  totalSeats           Int                @default(1) @map("total_seats")
  stripeCustomerId     String?            @unique @map("stripe_customer_id")
  credits              Int                @default(0)
  subscriptionInterval String?            @map("subscription_interval")
  creditActions        CreditAction[]
  payments             Payment[]
  projects             Project[]
  specialties          Specialty[]
  teams                Team[]
  templateDocuments    TemplateDocument[]
  templateProjects     TemplateProject[]
  users                User[]
  documents            Document[]
  issues               Issue[]
  workPlans            WorkPlan[]

  @@index([subscriptionTier, subscriptionStatus, status, stripeCustomerId])
  @@map("organizations")
}

model Team {
  id             String       @id @default(cuid())
  organizationId String       @map("organization_id")
  parentTeamId   String?      @map("parent_team_id")
  name           String       @unique
  description    String?
  status         RecordStatus @default(ACTIVE)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  meta           Json         @default("{}")
  projects       Project[]
  organization   Organization @relation(fields: [organizationId], references: [id])
  parentTeam     Team?        @relation("parentTeam", fields: [parentTeamId], references: [id])
  childTeams     Team[]       @relation("parentTeam")
  members        UserTeam[]

  @@index([organizationId, parentTeamId])
  @@map("teams")
}

model UserTeam {
  userId    String       @map("user_id")
  teamId    String       @map("team_id")
  status    RecordStatus @default(ACTIVE)
  meta      Json         @default("{}")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  team      Team         @relation(fields: [teamId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@id([userId, teamId])
  @@map("userTeams")
}

model TemplateProject {
  id             String          @id @default(cuid())
  organizationId String          @map("organization_id")
  name           String
  tags           String          @default("")
  description    String?
  rating         Int             @default(0)
  use_count      Int             @default(0)
  access         TemplateAccess  @default(ORGANIZATION)
  meta           Json?           @default("{}")
  status         ProjectStatus   @default(CREATED)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  creatorUserId  String          @map("creator_user_id")
  projects       Project[]
  templateIssues TemplateIssue[]
  creator        User            @relation(fields: [creatorUserId], references: [id])
  organization   Organization    @relation(fields: [organizationId], references: [id])

  @@index([organizationId, creatorUserId])
  @@map("templateProjects")
}

model TemplateIssue {
  id                 String                    @id @default(cuid())
  templateProjectId  String                    @map("template_project_id")
  name               String
  description        String?
  depth              Int                       @default(1)
  fields             Json?                     @default("{}")
  status             IssueStatus               @default(CREATED)
  meta               Json?                     @default("{}")
  createdAt          DateTime                  @default(now()) @map("created_at")
  updatedAt          DateTime                  @updatedAt @map("updated_at")
  creatorUserId      String                    @map("creator_user_id")
  type               IssueType?
  Issue              Issue[]
  templateDocument   TemplateDocument[]
  templateDependedBy TemplateIssueDependency[] @relation("templateDependedBy")
  templateDependsOn  TemplateIssueDependency[] @relation("templateDependsOn")
  creator            User                      @relation(fields: [creatorUserId], references: [id])
  templateProject    TemplateProject           @relation(fields: [templateProjectId], references: [id])

  @@index([templateProjectId, creatorUserId])
  @@map("templateIssues")
}

model TemplateIssueDependency {
  dependsOnTemplateIssueId  String
  dependedByTemplateIssueId String
  status                    RecordStatus  @default(ACTIVE)
  meta                      Json          @default("{}")
  createdAt                 DateTime      @default(now()) @map("created_at")
  updatedAt                 DateTime      @updatedAt @map("updated_at")
  dependedByTemplateIssue   TemplateIssue @relation("templateDependedBy", fields: [dependedByTemplateIssueId], references: [id])
  dependsOnTemplateIssue    TemplateIssue @relation("templateDependsOn", fields: [dependsOnTemplateIssueId], references: [id])

  @@id([dependsOnTemplateIssueId, dependedByTemplateIssueId])
  @@map("templateIssueDependencies")
}

model Project {
  id                  String           @id @default(cuid())
  organizationId      String           @map("organization_id")
  name                String
  description         String?
  storyPoint          Int?             @map("story_point")
  dueDate             DateTime?        @default(now()) @map("due_date")
  progress            Int?             @default(0)
  access              Access           @default(SELF)
  status              ProjectStatus    @default(CREATED)
  jiraId              String?          @unique @map("jira_id")
  meta                Json?            @default("{}")
  teamId              String?          @map("team_id")
  templateProjectId   String?          @map("template_project_id")
  creatorUserId       String           @map("creator_user_id")
  ownerUserId         String?          @map("owner_user_id")
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime         @updatedAt @map("updated_at")
  shortName           String           @unique
  completedStoryPoint Int?             @default(0) @map("completed_story_point")
  documents           Document[]
  issues              Issue[]
  creator             User             @relation("createdProjects", fields: [creatorUserId], references: [id])
  organization        Organization     @relation(fields: [organizationId], references: [id])
  owner               User?            @relation("ownedProjects", fields: [ownerUserId], references: [id])
  team                Team?            @relation(fields: [teamId], references: [id])
  templateProject     TemplateProject? @relation(fields: [templateProjectId], references: [id])
  workPlans           WorkPlan[]

  @@index([organizationId, creatorUserId, ownerUserId, templateProjectId, teamId])
  @@map("projects")
}

model Issue {
  id                  String               @id @default(cuid())
  projectId           String               @map("project_id")
  workPlanId          String?              @map("work_plan_id")
  organizationId      String?              @map("organization_id")
  name                String
  description         String?
  storyPoint          Int?                 @map("story_point")
  completedStoryPoint Int?                 @map("completed_story_point")
  plannedStartDate    DateTime?            @map("planned_start_date")
  plannedEndDate      DateTime?            @map("planned_end_date")
  actualStartDate     DateTime?            @map("actual_start_date")
  actualEndDate       DateTime?            @map("actual_end_date")
  progress            Int                  @default(0)
  type                IssueType
  status              IssueStatus          @default(CREATED)
  meta                Json?                @default("{}")
  jiraId              String?              @unique @map("jira_id")
  parentIssueId       String?              @map("parent_issue_id")
  templateIssueId     String?              @map("template_issue_id")
  creatorUserId       String               @map("creator_user_id")
  ownerUserId         String?              @map("owner_user_id")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  shortName           String               @unique
  comments            Comment[]
  documents           Document[]
  changeHistory       IssueChangeHistory[]
  dependedBy          IssueDependency[]    @relation("dependedBy")
  dependsOn           IssueDependency[]    @relation("dependsOn")
  creator             User                 @relation("createdBy", fields: [creatorUserId], references: [id])
  owner               User?                @relation("ownedBy", fields: [ownerUserId], references: [id])
  parentIssue         Issue?               @relation("parentIssue", fields: [parentIssueId], references: [id])
  childIssues         Issue[]              @relation("parentIssue")
  project             Project              @relation(fields: [projectId], references: [id])
  organzation         Organization?        @relation(fields: [organizationId], references: [id])
  templateIssue       TemplateIssue?       @relation(fields: [templateIssueId], references: [id])
  workPlan            WorkPlan?            @relation(fields: [workPlanId], references: [id])

  @@index([projectId, workPlanId, ownerUserId, creatorUserId, organizationId, parentIssueId, status])
  @@map("issues")
}

model IssueChangeHistory {
  id                Int      @id @default(autoincrement())
  issueId           String   @map("issue_id")
  userId            String   @map("user_id")
  modifiedAttribute String   @map("modified_attribute")
  createdAt         DateTime @default(now()) @map("created_at")
  issue             Issue    @relation(fields: [issueId], references: [id])
  user              User     @relation(fields: [userId], references: [id])
  workLogId         String?  @unique @map("work_log_id")

  @@index([issueId, createdAt])
  @@map("issueChangeHistories")
}

model IssueDependency {
  dependsOnIssueId  String
  dependedByIssueId String
  status            RecordStatus @default(ACTIVE)
  meta              Json         @default("{}")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  dependedBy        Issue        @relation("dependedBy", fields: [dependedByIssueId], references: [id])
  dependsOn         Issue        @relation("dependsOn", fields: [dependsOnIssueId], references: [id])

  @@id([dependsOnIssueId, dependedByIssueId])
  @@map("issueDependencies")
}

model Comment {
  id            String        @id @default(cuid())
  issueId       String        @map("issue_id")
  userId        String        @map("user_id")
  content       String        @map("content")
  replyTo       String?       @map("reply_to")
  jiraCommentId String?       @unique @map("jira_comment_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  status        CommentStatus @default(ACTIVE)
  issue         Issue         @relation(fields: [issueId], references: [id])
  user          User          @relation(fields: [userId], references: [id])

  @@index([issueId, userId])
  @@map("comments")
}

model WorkPlan {
  id                  String         @id @default(cuid())
  projectId           String         @map("project_id")
  parentWorkPlanId    String?        @map("parent_work_plan_id")
  organizationId      String?        @map("organization_id")
  name                String
  description         String?
  type                WorkPlanType
  storyPoint          Int?           @map("story_point")
  completedStoryPoint Int?           @map("completed_story_point")
  plannedStartDate    DateTime?      @map("planned_start_date")
  plannedEndDate      DateTime?      @map("planned_end_date")
  actualStartDate     DateTime?      @map("actual_start_date")
  actualEndDate       DateTime?      @map("actual_end_date")
  progress            Int            @default(0)
  status              WorkPlanStatus @default(CREATED)
  jiraSprintId        String?        @unique @map("jira_sprint_id")
  meta                Json?          @default("{}")
  creatorUserId       String         @map("creator_user_id")
  ownerUserId         String?        @map("owner_user_id")
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")
  issues              Issue[]
  creator             User           @relation("createdWorkPlans", fields: [creatorUserId], references: [id])
  owner               User?          @relation("ownedWorkPlans", fields: [ownerUserId], references: [id])
  parentWorkPlan      WorkPlan?      @relation("parentWorkPlan", fields: [parentWorkPlanId], references: [id])
  childWorkPlans      WorkPlan[]     @relation("parentWorkPlan")
  project             Project        @relation(fields: [projectId], references: [id])
  organization        Organization?  @relation(fields: [organizationId], references: [id])

  @@index([projectId, parentWorkPlanId, creatorUserId, ownerUserId, organizationId])
  @@map("workPlans")
}

model TemplateDocument {
  id                       String             @id @default(cuid())
  organizationId           String             @map("organization_id")
  name                     String
  url                      String?
  description              String?
  type                     DOCTYPE
  access                   TemplateAccess     @default(ORGANIZATION)
  status                   TemplateStatus     @default(CREATED)
  promptText               String?            @default("") @map("prompt_text")
  outputFormat             String?            @map("output_format")
  sampleInputText          String?            @map("sample_input_text")
  sampleOutputText         String?            @map("sample_output_text")
  images                   String[]
  tags                     String[]
  useCount                 Int                @default(0) @map("use_count")
  parentTemplateDocumentId String?            @map("parent_template_document_id")
  meta                     Json               @default("{}")
  creatorUserId            String             @map("creator_user_id")
  createdAt                DateTime           @default(now()) @map("created_at")
  updatedAt                DateTime           @updatedAt @map("updated_at")
  documents                Document[]
  creator                  User               @relation(fields: [creatorUserId], references: [id])
  organization             Organization       @relation(fields: [organizationId], references: [id])
  parentTemplateDocument   TemplateDocument?  @relation("templateDocumentParent", fields: [parentTemplateDocumentId], references: [id])
  childTemplateDocuments   TemplateDocument[] @relation("templateDocumentParent")
  TemplateIssue            TemplateIssue?     @relation(fields: [templateIssueId], references: [id])
  templateIssueId          String?

  @@index([organizationId, creatorUserId])
  @@map("templateDocuments")
}

model Document {
  id                 String            @id @default(cuid())
  projectId          String?           @map("project_id")
  issueId            String?           @map("issue_id")
  organizationId     String?           @map("organization_id")
  name               String
  description        String?
  content            Bytes?            @default("")
  type               DOCTYPE
  url                String
  imageBase64        String?           @map("image_base_64")
  access             Access            @default(ORGANIZATION)
  status             DocumentStatus    @default(CREATED)
  meta               Json?             @default("{}")
  templateDocumentId String?           @map("template_document_id")
  creatorUserId      String            @map("creator_user_id")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  creator            User              @relation(fields: [creatorUserId], references: [id])
  issue              Issue?            @relation(fields: [issueId], references: [id])
  project            Project?          @relation(fields: [projectId], references: [id])
  organization       Organization?     @relation(fields: [organizationId], references: [id])
  templateDocument   TemplateDocument? @relation(fields: [templateDocumentId], references: [id])

  @@index([projectId, issueId, creatorUserId, organizationId, status])
  @@map("documents")
}

model Payment {
  id               String           @id @default(cuid())
  payerUserId      String           @map("payer_user_id")
  email            String
  subscriptionTier SubscriptionTier @map("subscription_tier")
  seats            Int?             @default(1)
  currency         String
  meta             Json             @default("{}")
  amount           Int
  invoiceId        String           @map("invoice_id")
  organizationId   String           @map("organization_id")
  status           String
  invoiceUrl       String           @map("invoice_url")
  type             String           @default("")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  eventId          String?          @map("event_id")
  organization     Organization     @relation(fields: [organizationId], references: [id])
  payer            User             @relation(fields: [payerUserId], references: [id])

  @@index([payerUserId, organizationId, type, status, eventId])
  @@map("payments")
}

model CreditAction {
  id             String       @id @default(cuid())
  organizationId String       @map("organization_id")
  userId         String       @map("user_id")
  action         String       @default("")
  amount         Int
  status         String
  meta           Json         @default("{}")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@index([userId, organizationId, action, status])
  @@map("creditActions")
}

model Specialty {
  id             String       @id @default(cuid())
  name           String
  displayName    String       @map("display_name")
  description    String       @default("")
  organizationId String       @map("organization_id")
  creatorUserId  String       @map("creator_user_id")
  status         String       @default("ACTIVE")
  access         String       @default("ORGANIZATION")
  meta           Json         @default("{}")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  creator        User         @relation(fields: [creatorUserId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId, name, status])
  @@map("specialties")
}

model DocumentPermission {
  id         String                   @id @default(cuid())
  documentId String                   @map("document_id")
  email      String                   @default("")
  permission DocumentPermissionTypes  @default(VIEW)
  status     DocumentPermissionStatus @default(ACTIVE)
  createdAt  DateTime                 @default(now()) @map("created_at")
  updatedAt  DateTime                 @updatedAt @map("updated_at")
  userId     String?                  @map("user_id")
  user       User?                    @relation(fields: [userId], references: [id])

  @@index([documentId, email])
  @@map("documentPermissions")
}

model ChatSession {
  id               String                      @id @default(cuid())
  name             String?
  access           Access                      @default(SELF)
  userId           String                      @map("user_id")
  targetEntityId   String                      @map("target_entity_id")
  targetEntityType ChatSessionTargetEntityType @map("target_entity_type")
  status           RecordStatus                @default(ACTIVE)
  createdAt        DateTime                    @default(now()) @map("created_at")
  updatedAt        DateTime                    @updatedAt @map("updated_at")

  user        User?         @relation(fields: [userId], references: [id])
  chatHistory ChatHistory[]

  @@index([userId, targetEntityId, targetEntityType, status])
  @@map("chatSessions")
}

model ChatHistory {
  id        Int      @id @default(autoincrement())
  sessionId String   @map("session_id")
  message   Json
  createdAt DateTime @default(now()) @map("created_at")

  chatSession ChatSession @relation(fields: [sessionId], references: [id])

  @@index([sessionId])
  @@map("chatHistories")
}

enum SubscriptionTier {
  FREE
  STARTER
  PRO
  BUSINESS
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  OVERDUE
  EXPIRED
  CANCELED
  CANCELED_YET_ACTIVE
  TRIAL
}

enum UserRole {
  SUPERADMIN
  ADMIN
  EMPLOYEE
  VIRTUALEMPLOYEE
}

enum RecordStatus {
  PENDING
  ACTIVE
  INACTIVE
  DEACTIVATED
  READ
}

enum Department {
  Product
  Engineering
  Sales
  Marketing
  Operation
}

enum Access {
  SELF
  TEAM
  ORGANIZATION
  PUBLIC
}

enum TemplateAccess {
  SELF
  ORGANIZATION
  PUBLIC
}

enum ProjectStatus {
  CREATED
  STARTED
  PAUSED
  COMPLETED
  CANCELED
}

enum IssueStatus {
  CREATED
  STARTED
  OVERWRITTEN
  INREVIEW
  APPROVED
  COMPLETED
  CANCELED
}

enum IssueType {
  BUILDABLE
  EPIC
  STORY
  TASK
  SUBTASK
  BUG
}

enum CommentStatus {
  ACTIVE
  DELETED
}

enum WorkPlanType {
  MILESTONE
  SPRINT
  KANBAN
  BACKLOG
}

enum WorkPlanStatus {
  CREATED
  STARTED
  OVERWRITTEN
  COMPLETED
  CANCELED
}

enum DOCTYPE {
  PRD
  UI_DESIGN
  PROTOTYPE
  TECH_DESIGN
  DEVELOPMENT_PLAN
  QA_PLAN
  RELEASE_PLAN
  PROPOSAL
  BUSINESS
  PRODUCT
  ENGINEERING
  MARKETING
  SALES
  SUPPORT
  OTHER
}

enum DocumentStatus {
  CREATED
  INREVIEW
  APPROVED
  PUBLISHED
  CANCELED
  ARCHIVED
}

enum DocumentPermissionTypes {
  VIEW
  EDIT
}

enum DocumentPermissionStatus {
  ACTIVE
  CANCELED
}

enum TemplateStatus {
  CREATED
  PUBLISHED
  CANCELED
  ARCHIVED
}

enum ChatSessionTargetEntityType {
  DOCUMENT
  PROJECT
  ISSUE
  WORKPLAN
  CHAT
}
