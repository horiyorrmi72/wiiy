// add a react component that renders a button that allows the user to download the document

import { useEffect, useState } from 'react';
import {
  ArrowRightOutlined,
  ArrowUpOutlined,
  CloudUploadOutlined,
  DatabaseOutlined,
  EllipsisOutlined,
  ExportOutlined,
  EyeOutlined,
  FileAddOutlined,
  FileOutlined,
  FilePdfOutlined,
  GithubOutlined,
} from '@ant-design/icons';
import { Prisma } from '@prisma/client';
import { Button, Dropdown, Flex, message } from 'antd';
import { AlignmentType, Document, Packer, Paragraph, Table } from 'docx';
import { useLocation } from 'react-router-dom';

import AppBreadcrumb, {
  BreadCrumbItem,
} from '../../../common/components/AppBreadcrumb';
import { useAppModal } from '../../../common/components/AppModal';
import { useCurrentUser } from '../../../common/contexts/currentUserContext';
import { GlobalStoreInst } from '../../../common/util/globalStore';
import { COLORS } from '../../../lib/constants';
import { convertDocxToPdf } from '../../../lib/convert';
import { GithubUserProfile } from '../../../shared/types/githubTypes';
import trackEvent from '../../../trackingClient';
import { DevPlanOutput } from '../../devPlans/types/devPlanTypes';
import {
  connectToGithubApi,
  getUserGithubProfile,
} from '../../project/api/githubApi';
import { handleGitHubLogin } from '../../project/components/prototype/GitHubHandler';
import GitHubShow from '../../project/components/prototype/GitHubShow';
import {
  handleViewDatabase,
  TableInfo,
} from '../../project/components/prototype/PrototypeDataBaseHandler';
import { DocumentWithoutContent } from '../../project/components/prototype/PrototypeEditorShow';
import { DocumentOutput } from '../types/documentTypes';

import './DocumentToolbar.scss';

interface DocumentToolbarProps {
  breadcrumbItems: ReadonlyArray<BreadCrumbItem>;
  doc?: DocumentOutput | DevPlanOutput;
  updateDoc?: (e: React.MouseEvent<HTMLButtonElement>) => void;
  docActions?: string[];
  paragraphs?: (Paragraph | Table)[];
  pdfLineHeight?: number;
  onDeploy?: () => void;
  onViewDatabase?: (data: TableInfo[]) => void;
  toolbarDisabled?: boolean;
}

export const DocumentToolBarActions = {
  Publish: 'Publish',
  Export: 'Export',
  Share: 'Share',
  Convert: 'Convert',
  ViewDatabase: 'ViewDatabase',
  GitHub: 'GitHub',
};

export default function DocumentToolbar({
  breadcrumbItems,
  doc,
  updateDoc,
  paragraphs,
  docActions = [
    DocumentToolBarActions.Publish,
    DocumentToolBarActions.ViewDatabase,
    DocumentToolBarActions.GitHub,
    DocumentToolBarActions.Export,
    DocumentToolBarActions.Share,
    DocumentToolBarActions.Convert,
  ],
  pdfLineHeight,
  onDeploy,
  onViewDatabase,
  toolbarDisabled = false,
}: DocumentToolbarProps) {
  const { showAppModal } = useAppModal();
  const { user } = useCurrentUser();
  const [isMobile, setIsMobile] = useState(false);

  const [isPublishing, setIsPublishing] = useState(false);
  const [isViewingDatabase, setIsViewingDatabase] = useState(false);

  const [isGitHubModalVisible, setIsGitHubModalVisible] = useState(false);
  const [githubUserProfile, setGithubUserProfile] =
    useState<GithubUserProfile | null>(null);
  const [isGithubConnected, setIsGithubConnected] = useState(false);
  const location = useLocation();

  const [githubRepoUrl, setGithubRepoUrl] = useState<string>('');
  const [deployUrl, setDeployUrl] = useState<string>('');

  useEffect(() => {
    let meta = doc?.meta as Prisma.JsonObject;
    setGithubRepoUrl(meta?.repoUrl as string);
    setDeployUrl(meta?.builtFileUrl as string);
  }, [doc, setGithubRepoUrl]);

  function handleShareDoc(e: React.MouseEvent<HTMLButtonElement>) {
    if (doc) {
      showAppModal({
        type: 'docSharing',
        docId: doc.id,
        title: `Share "${doc.name}"`,
        documentAccess: doc.access,
      });
    }
  }

  function handleConvertDoc() {
    let chatSessionId = location.pathname?.split('/').pop();
    showAppModal({
      type: 'addDocument',
      chatSessionId,
    });
    // set flag for auto generate doc
    GlobalStoreInst.set('autoGenerateDocForChatSession', chatSessionId);
  }

  async function handleExportPdfV1() {
    const currDate = new Date().toLocaleDateString();
    const filename = doc?.name + '_' + currDate + '.pdf';
    const exportDoc = new Document({
      numbering: {
        config: [
          {
            reference: 'ordered-list',
            levels: [
              {
                level: 0,
                format: 'decimal',
                text: '%1.',
                alignment: AlignmentType.START,
                style: {
                  paragraph: {
                    indent: { left: 720, hanging: 260 },
                  },
                },
              },
            ],
          },
        ],
      },
      sections: [
        {
          properties: {},
          children: paragraphs as Paragraph[],
        },
      ],
    });
    const docxBlob: Blob = await Packer.toBlob(exportDoc);
    const pdfBase64 = await convertDocxToPdf(docxBlob, pdfLineHeight);
    const link = document.createElement('a');
    link.href = pdfBase64;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  async function handleExportDocxV1() {
    const currDate = new Date().toLocaleDateString();
    const filename = doc?.name + '_' + currDate + '.docx';
    const exportDoc = new Document({
      numbering: {
        config: [
          {
            reference: 'ordered-list',
            levels: [
              {
                level: 0,
                format: 'decimal',
                text: '%1.',
                alignment: AlignmentType.START,
                style: {
                  paragraph: {
                    indent: { left: 720, hanging: 260 },
                  },
                },
              },
            ],
          },
        ],
      },
      sections: [
        {
          properties: {},
          children: paragraphs as Paragraph[],
        },
      ],
    });

    const blob = await Packer.toBlob(exportDoc);

    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    link.click();
    // track event
    trackEvent('exportDocumentV1', {
      distinct_id: user.email,
      payload: JSON.stringify({
        documentId: doc?.id,
        name: filename,
        documentType: doc?.type,
      }),
    });
  }

  useEffect(() => {
    const queryParams = new URLSearchParams(location.search);
    const code = queryParams.get('code');

    if (code) {
      const exchangeCodeForToken = async () => {
        try {
          const { accessToken, userName } = await connectToGithubApi(code);
          if (accessToken && userName) {
            setIsGithubConnected(true);
            setGithubUserProfile({ accessToken, userName });
            const newUrl = location.pathname + location.hash;
            window.history.replaceState({}, '', newUrl);
          }
        } catch (error) {
          console.error('Error exchanging code for token:', error);
          message.error('Failed to connect to GitHub');
        }
      };

      exchangeCodeForToken();
    }
  }, [location]);

  useEffect(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth <= 842);
    };
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
    return () => {
      window.removeEventListener('resize', checkScreenSize);
    };
  }, []);

  useEffect(() => {
    const fetchGithubProfile = async () => {
      if (!githubUserProfile) {
        const profile = await getUserGithubProfile();
        if (profile) {
          setGithubUserProfile(profile);
          setIsGithubConnected(true);
        }
      }
    };
    fetchGithubProfile();
  }, [githubUserProfile]);

  const exportMenuItems = [
    {
      key: 'export-pdf',
      label: 'Export PDF',
      onClick: handleExportPdfV1,
    },
    {
      key: 'export-docx',
      label: 'Export DOCX',
      onClick: handleExportDocxV1,
    },
  ];

  const mobileMenuItems = [
    {
      key: 'publish',
      label: (
        <>
          <CloudUploadOutlined
            style={{ color: COLORS.PRIMARY, fontSize: 18, marginRight: '4px' }}
          />
          Publish
        </>
      ),
      onClick: () => {
        if (updateDoc) {
          updateDoc({} as React.MouseEvent<HTMLButtonElement>);
        }
      },
    },
    {
      key: 'export-pdf',
      label: (
        <>
          <FilePdfOutlined
            style={{ color: COLORS.PRIMARY, fontSize: 18, marginRight: '4px' }}
          />
          Export PDF
        </>
      ),
      onClick: handleExportPdfV1,
    },
    {
      key: 'export-docx',
      label: (
        <>
          <FileOutlined
            style={{ color: COLORS.PRIMARY, fontSize: 18, marginRight: '4px' }}
          />
          Export DOCX
        </>
      ),
      onClick: handleExportDocxV1,
    },
    {
      key: 'convert',
      label: (
        <>
          <FileAddOutlined
            style={{ color: COLORS.PRIMARY, fontSize: 18, marginRight: '4px' }}
          />
          Convert doc
        </>
      ),
      onClick: () => {
        handleConvertDoc();
      },
    },
  ];

  const handleViewDatabaseClick = async () => {
    if (
      !doc?.id ||
      doc.type !== 'PROTOTYPE' ||
      isViewingDatabase ||
      !onViewDatabase
    )
      return;

    setIsViewingDatabase(true);
    try {
      const data = await handleViewDatabase(doc.id);
      if (data && data.length > 0 && onViewDatabase) {
        onViewDatabase(data);
      } else {
        message.info('No info found in the database');
      }
    } catch (error) {
      console.error('Error viewing database:', error);
      message.error('Failed to load data: ' + error);
    } finally {
      setIsViewingDatabase(false);
    }
  };

  const onGitHubLogin = () => {
    handleGitHubLogin(doc?.id as string);
  };

  const handleGitHubUpload = () => {
    setIsGitHubModalVisible(true);
  };

  const handleGitHubView = () => {
    if (githubRepoUrl) {
      window.open(githubRepoUrl, '_blank');
    }
  };

  const handlePublish = async () => {
    if (isPublishing) return;

    setIsPublishing(true);
    try {
      if (doc?.type === 'PROTOTYPE' && onDeploy) {
        onDeploy();
      } else {
        if (updateDoc) {
          updateDoc({} as React.MouseEvent<HTMLButtonElement>);
        }
      }
    } finally {
      setIsPublishing(false);
    }
  };

  return (
    <Flex
      className="document-toolbar"
      justify={'space-between'}
      align={'center'}
    >
      <AppBreadcrumb items={breadcrumbItems} />
      {!!docActions.length && (
        <Flex
          align="center"
          justify="center"
          className="breadcrumb-buttons"
          style={{ opacity: toolbarDisabled ? 0.5 : 1.0 }}
        >
          {isMobile ? (
            <Dropdown menu={{ items: mobileMenuItems }} trigger={['click']}>
              <Button
                type="link"
                disabled={toolbarDisabled}
                style={{
                  padding: 0,
                  color: 'black',
                  height: 24,
                  width: 24,
                  borderRadius: '100%',
                  background: '#e4e4e4',
                }}
              >
                <EllipsisOutlined style={{ rotate: '90deg', fontSize: 16 }} />
              </Button>
            </Dropdown>
          ) : (
            <>
              {docActions.includes(DocumentToolBarActions.Publish) && (
                <div
                  style={{ display: 'flex', alignItems: 'center', gap: '4px' }}
                >
                  <Button
                    data-action="publish"
                    type="link"
                    onClick={handlePublish}
                    disabled={toolbarDisabled || isPublishing}
                    loading={isPublishing}
                    style={{ padding: 0, color: 'black' }}
                    id="doc-actions"
                  >
                    <CloudUploadOutlined
                      style={{ color: COLORS.PRIMARY, fontSize: 20 }}
                    />
                    {isPublishing ? 'Publishing...' : 'Publish'}
                  </Button>
                  {doc?.type === 'PROTOTYPE' && deployUrl && (
                    <Button
                      type="link"
                      onClick={() =>
                        window.open(`/preview/${doc?.id}`, '_blank')
                      }
                      style={{
                        padding: 0,
                        color: 'black',
                        height: '24px',
                        width: '24px',
                        transform: 'rotate(45deg)',
                      }}
                    >
                      <ArrowUpOutlined
                        style={{ color: COLORS.PRIMARY, fontSize: 16 }}
                      />
                    </Button>
                  )}
                </div>
              )}

              {doc?.type === 'PROTOTYPE' &&
                docActions.includes(DocumentToolBarActions.ViewDatabase) && (
                  <Button
                    type="link"
                    onClick={handleViewDatabaseClick}
                    disabled={toolbarDisabled || isViewingDatabase}
                    loading={isViewingDatabase}
                    style={{ padding: 0, color: 'black' }}
                  >
                    <DatabaseOutlined
                      style={{ color: COLORS.PRIMARY, fontSize: 18 }}
                    />
                    {isViewingDatabase ? 'Loading...' : 'Database'}
                  </Button>
                )}

              {doc?.type === 'PROTOTYPE' &&
                docActions.includes(DocumentToolBarActions.GitHub) && (
                  <>
                    {!githubRepoUrl && !isGithubConnected && (
                      <Button
                        type="link"
                        onClick={onGitHubLogin}
                        disabled={toolbarDisabled}
                        style={{ padding: 0, color: 'black' }}
                      >
                        <GithubOutlined
                          style={{ color: COLORS.PRIMARY, fontSize: 18 }}
                        />
                        Connect GitHub
                      </Button>
                    )}

                    {!githubRepoUrl && isGithubConnected && (
                      <Button
                        type="link"
                        disabled={toolbarDisabled}
                        onClick={handleGitHubUpload}
                        style={{ padding: 0, color: 'black' }}
                      >
                        <GithubOutlined
                          style={{ color: COLORS.PRIMARY, fontSize: 18 }}
                        />
                        Upload to Github
                      </Button>
                    )}

                    {githubRepoUrl && (
                      <Button
                        type="link"
                        onClick={handleGitHubView}
                        disabled={toolbarDisabled}
                        style={{ padding: 0, color: 'black' }}
                      >
                        <EyeOutlined
                          style={{ color: COLORS.PRIMARY, fontSize: 18 }}
                        />
                        View on GitHub
                      </Button>
                    )}
                  </>
                )}

              {doc?.type !== 'PROTOTYPE' &&
                docActions.includes(DocumentToolBarActions.Export) && (
                  <Dropdown
                    menu={{ items: exportMenuItems }}
                    trigger={['hover']}
                  >
                    <Button
                      type="link"
                      disabled={toolbarDisabled}
                      style={{ padding: 0, color: 'black' }}
                    >
                      <ExportOutlined
                        style={{ color: COLORS.PRIMARY, fontSize: 18 }}
                      />
                      Export
                    </Button>
                  </Dropdown>
                )}

              {doc?.type !== 'PROTOTYPE' &&
                docActions.includes(DocumentToolBarActions.Share) && (
                  <Button
                    type="link"
                    style={{ padding: 0, color: 'black' }}
                    onClick={handleShareDoc}
                    disabled={toolbarDisabled}
                  >
                    <ArrowRightOutlined
                      style={{ color: COLORS.PRIMARY, fontSize: 16 }}
                    />
                    Share
                  </Button>
                )}

              {/* {doc?.type !== 'PROTOTYPE' &&
                docActions.includes(DocumentToolBarActions.Convert) && (
                  <Button
                    type="link"
                    style={{ padding: 0, color: 'black' }}
                    onClick={handleConvertDoc}
                    disabled={toolbarDisabled}
                  >
                    <FileAddOutlined
                      style={{ color: COLORS.PRIMARY, fontSize: 18 }}
                    />
                    Convert to doc
                  </Button>
                )} */}
            </>
          )}
        </Flex>
      )}

      {isGitHubModalVisible && (
        <GitHubShow
          githubUserProfile={githubUserProfile as GithubUserProfile}
          document={doc as DocumentWithoutContent}
          onClose={() => setIsGitHubModalVisible(false)}
          setGithubRepoUrl={setGithubRepoUrl}
        />
      )}
    </Flex>
  );
}
